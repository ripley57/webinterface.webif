<?php 
/*
** We need to use this because this php page is generated by one web server (httpd)
** but we need to direct our JSON requests to the Kodi web server which recognises
** the OpenELEC RPC calls. 
*/
header("Access-Control-Allow-Origin: *");

/*
** My useful php functions.
*/
include 'resources/utils.php';
?>

<!DOCTYPE html>
<html>
   <head>
      <meta charset="utf-8" />
      <title>Plexus Scraper URL uploader</title>
      <link rel="stylesheet" href="css/main.css"/>
      <style>
         #result
         {
            font-weight: bold;
            font-size: 1.1em;
            margin: 0 0.5em;
         }

         .urlTextbox {
	    width: 500px;
            height: 20px
         }

      </style>
   </head>

   <body>
      <div>
	<span>Upload Plexus Scraper URLs:</span><br/>

	<?php
	/*
	** Read the settings.xml file from our plexusscraper Kodi addon, to 
	** display the curent selection of urls to scrap for acestream links.
	*/
	$i = 1;
	$xml=simplexml_load_file("file:///storage/.kodi/userdata/addon_data/program.plexusscraper/settings.xml") 
			or die("Error: Cannot create object");
	foreach($xml->children() as $setting) {
        	printf("<span>Url %d &nbsp;</span> <input type=\"text\" value=\"%s\" class=\"urlTextbox\" name=\"url_%d\" /> <button id=\"button_url_%d\">Upload</button> <br/>\n", $i, $setting['value'], $i, $i);
         	$i++;
	}
	?> 
      </div>

      <!-- We'll display the Kodi RPC response here. -->
      <p>Response from Kodi: <span id="result"></span></p>

      <p><b>Note:</b> It seems that Kodi RPC always returns an error response for reqeusts originating from this page (plexus.php), 
even though the RPC request is being successfully actioned by Kodi. 
It is suspected that this is because this web page originated from our "httpd" web server (running on port 8080) and we are then 
sending our RPC request to the Kodi built-in web server (running on port 80). 
Because of the change in port number, I suspect we are being impacted by the <a href="https://en.wikipedia.org/wiki/Same-origin_policy">
Same-origin security policy</a>. 
This web page includes an explicitly-added "Access-Control-Allow-Origin" header, so we can successfully send Ajax requests to a different 
target port number (see <a href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing">Cross-origin resource sharing</a> for more details). 
However, the Kodi RPC response still reports an error.</p>

      <!-- Load JQuery -->
      <script src="js/jquery-1.11.3.min.js"></script>

      <script>
	function setResult(txt) {
		jQuery('#result').text(txt);
	}

	//
	// Execute Kodi RPC call to update a url in the plexusscraper addon, similar to this:
    	// 
    	// http://192.168.1.229/jsonrpc?request={"id": 1, "jsonrpc":"2.0", "method": "Addons.ExecuteAddon", 
    	//   "params": { "addonid": "program.plexusscraper", 
    	//   "params": {"url_path": "http://rptest.html", "mode": "addurl", "url_id": "3"}}}
    	//
    	function callRPC(arg_id,arg_url) {
		var data = {
			"id":1,
			"jsonrpc":"2.0",
			"method":"Addons.ExecuteAddon",
			"params":{"addonid":"program.plexusscraper","params":{"url_path":arg_url,"mode":"addurl","url_id":arg_id}},
		};
 
		// Debugging - how we determine the server ip address.
		//<?php printf("alert(\"%s\",\"%s\");\n", getIPAddress(),"test"); ?>

		//
		// Note: We must direct the Kodi RPC call to the web server on port 80 as
		//       this is the Kodi web server, and our PHP-capable web server listening 
		//       on port 8080 won't understand the RPC request.
		//
		// Note: JQuery getSON() doesn't seem to have a way to specify an error handler, 
		//       so we'll use the lower-level ajax call method instead, where we CAN.
		//       We need an error handler because it seems that a Kodi RPC request sent to a port
		//       that is different to where this web page originated from, returns an error response, 
		//       but the rpc call does still seem to work successfully. 
		//	 Here's the Kodi RPC error response we see:
		//          {"readyState":0,"responseText":"","status":0,"statusText":"error"}
		//       Compare this with the successful response seen when the port number is unchanged:
		//          {"id":1,"jsonrpc":"2.0","result":"OK"}
		//
		// JQuery getSON() approach:
		//$.getJSON('http://192.168.1.229:80/jsonrpc?request=' + JSON.stringify(data), 
		//<?php printf("$.getJSON('http://%s:80/jsonrpc?request=' + JSON.stringify(data),\n", getIPAddress()); ?>
		//function(response) {
		//	console.log(response);
		//	setResult(JSON.stringify(response));
		//});
		//
		// Lower-level ajax approach:
		$.ajax({
			<?php printf("url: 'http://%s:80/jsonrpc?request=' + JSON.stringify(data),\n", getIPAddress()); ?>
   		 	type: 'GET',
   			success: function(response){ 
			    console.log(response);
       			    setResult(JSON.stringify(response));
    			},
    			error: function(response) {
			    console.log(response);
       			    setResult(JSON.stringify(response));
    			}
		});
	}  

	jQuery('#button_url_1').click(function () {
		var url = $('input:text[name=url_1]').val();
		callRPC("1",url);
	});
	jQuery('#button_url_2').click(function () {
		var url = $('input:text[name=url_2]').val();
		callRPC("2",url);
	});
	jQuery('#button_url_3').click(function () {
		var url = $('input:text[name=url_3]').val();
		callRPC("3",url);
	});
	jQuery('#button_url_4').click(function () {
		var url = $('input:text[name=url_4]').val();
		callRPC("4",url);
	});
	jQuery('#button_url_5').click(function () {
		var url = $('input:text[name=url_5]').val();
		callRPC("5",url);
	});
	</script>
   </body>
</html>
